spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
 
# DB Source URL
#리눅스 서버2
#spring.datasource.url=jdbc:mysql://192.168.56.102:3306/amusement?allowPublicKeyRetrieval=true&serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
#spring.datasource.url=jdbc:mysql://192.168.0.9:3306/amusement?allowPublicKeyRetrieval=true&serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
spring.datasource.url=jdbc:mysql://localhost:3306/exciting?allowPublicKeyRetrieval=true&serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8

# DB username
#spring.datasource.username=amuse
#spring.datasource.username=myuser
spring.datasource.username=root

# DB password
#spring.datasource.password=!Boolean1234
#spring.datasource.password=tmvmfld1234!@#$
spring.datasource.password=rpass

# true 설정시 JPA 쿼리문 확인 가능
spring.jpa.show-sql=true
 
# DDL(create, alter, drop) 정의시 DB의 고유 기능을 사용할 수 있다.
spring.jpa.hibernate.ddl-auto=update
 
# JPA의 구현체인 Hibernate가 동작하면서 발생한 SQL의 가독성을 높여준다.
spring.jpa.properties.hibernate.format_sql=true

#Oauth2.0 github 설정
spring.security.oauth2.client.registration.github.clientId=Iv1.4abea673861f0e51
spring.security.oauth2.client.registration.github.clientSecret=559473762f895df05f107107aafd370f4ef81e5a
spring.security.oauth2.client.registration.github.redirectUri={baseUrl}/login/authGit/{registrationId}
spring.security.oauth2.client.registration.github.scope=user:email,read:user
#login/oauth
spring.security.oauth2.client.provider.github.authorizationUri=https://github.com/login/oauth/authorize
spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token
spring.security.oauth2.client.provider.github.user-info-uri=https://api.github.com/user
